/**
 * @file command.h
 * @author Шанин А.М. (dnega@mail.ru)
 * @brief Заголовочный файл интерпретатора команд.
 * @version 0.1
 * @date 20.05.2016
 * 
 * @copyright (C) Ярославль, 2016
 * 
 */
#ifndef __COMMAND_H__
#define __COMMAND_H__

/******************************************************************************
 *	INCLUDE
 *****************************************************************************/
#include "type.h"
#include "define.h"
#include "serial_port.h"

/******************************************************************************
 *	DEFINE
 *****************************************************************************/
#define IS_DIGIT(x) (('0' <= (x)) && ((x) <= '9'))																																 //!< Проверить на число
#define IS_CHAR(x) ((' ' <= x) && (x != '\"'))																																	 //!< Проверить на символ
#define IS_HEX(x) ((('0' <= (x)) && ((x) <= '9')) || (('a' <= (x)) && ((x) <= 'f')) || (('A' <= (x)) && ((x) <= 'F')))															 //!< Проверить на шестнадцатеричное цисло
#define TO_HEX(x) ((('0' <= (x)) && ((x) <= '9')) ? ((x) - '0') : ((('a' <= (x)) && ((x) <= 'f')) ? ((x) - 'a' + 10) : ((('A' <= (x)) && ((x) <= 'F')) ? ((x) - 'A' + 10) : 0))) //!< Перевести в шестнадцатеричное число

#define FUNC_STR(ss) #ss //!< Макрос "В строку"

#define FUNC_GET_INT(s)           \
	void func_get_##s(void *p)    \
	{                             \
		con_str(FUNC_STR(s) "="); \
		con_dec(data_eeprom.s);   \
		con_str("\n\r");          \
		con_start();              \
	} //!< Генератор функции "Считать целое число"

#define FUNC_SET_INT(s)            \
	void func_set_##s(void *p)     \
	{                              \
		eeprom_unlock();           \
		data_eeprom.s = *(int *)p; \
		eeprom_lock();             \
	} //!< Генератор функции "Записать целое число"

#define FUNC_GET_FLOAT(s)         \
	void func_get_##s(void *p)    \
	{                             \
		con_str(FUNC_STR(s) "="); \
		con_float(data_eeprom.s); \
		con_str("\n\r");          \
		con_start();              \
	} //!< Генератор функции "Считать вещественное число"

#define FUNC_SET_FLOAT(s)            \
	void func_set_##s(void *p)       \
	{                                \
		eeprom_unlock();             \
		data_eeprom.s = *(float *)p; \
		eeprom_lock();               \
	} //!< Генератор функции "Записать вещественное число"

#define FUNC_TABLE_INT(s)            \
	{FUNC_STR(s) "?", func_get_##s}, \
	{                                \
		FUNC_STR(s)                  \
		"=%d", func_set_##s          \
	} //!< Генератор таблицы для челого числа

#define FUNC_TABLE_FLOAT(s)          \
	{FUNC_STR(s) "?", func_get_##s}, \
	{                                \
		FUNC_STR(s)                  \
		"=%f", func_set_##s          \
	} //!< Генератор таблицы для вещественного числа

//-----------------------------------------------------------------------------
//! \typedef void command_func(void *);
//! \brief Тип функции команды консоли
//-----------------------------------------------------------------------------
typedef void command_func(void *);

//-----------------------------------------------------------------------------
//! \typedef struct sEXEC_COMMAND
//! \brief Тип для записи таблицы команд
//! \struct sEXEC_COMMAND
//! \brief Тип для записи таблицы команд
//-----------------------------------------------------------------------------
typedef struct sEXEC_COMMAND
{
	BYTE *pattern;		//!< Шаблон команды
	command_func *func; //!< Указатель на функцию
} sEXEC_COMMAND;

/******************************************************************************
 *	FUNCTION
 *****************************************************************************/
//-----------------------------------------------------------------------------
//! \fn extern void command_mainloop(void)
//! \brief Обработчик команд консоли
//-----------------------------------------------------------------------------
extern void command_mainloop(void);

//-----------------------------------------------------------------------------
//! \fn extern int command_exec(const sEXEC_COMMAND *table, const BYTE *in, BYTE *out)
//! \brief Обработчик команд
//! \param table Указатель на таблицу команд
//! \param in Входной буфер
//! \param out Выходной буфер
//! \return Статус выполнения:
//! - 0 - команда не найдена
//! - 1 - команда выполнена
//-----------------------------------------------------------------------------
extern int command_exec(const sEXEC_COMMAND *table, const BYTE *in, BYTE *out);

/******************************************************************************
 *	VARIABLE
 ******************************************************************************/
extern const char s_undef[];						//!< Сообщение "неисвестная команда"
extern sEXEC_COMMAND const *console_command_table;	//!< Указатель на таблицу команд
extern const sEXEC_COMMAND console_command_init[];	//!< Таблица неавторизованных команд
extern const sEXEC_COMMAND console_command_login[]; //!< Таблица администраторских команд

#endif // __COMMAND_H__
/******************************************************************************
 * КОНЕЦ ФАЙЛА
 *****************************************************************************/
