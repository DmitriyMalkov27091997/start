/**
 * @file serial_port.h
 * @author Шанин А.М. (dnega@mail.ru)
 * @brief Заголовочный файл драйвера последовательного порта.
 * @version 0.1
 * @date 20.05.2016
 * 
 * @copyright (C) Ярославль, 2016
 * 
 */
#ifndef	__SERIAL_PORT_H__
#define	__SERIAL_PORT_H__

/******************************************************************************
 *	INCLUDE
 *****************************************************************************/
#include "stm32l1xx.h"
#include "type.h"

/******************************************************************************
 *	DEFINE
 *****************************************************************************/
//-----------------------------------------------------------------------------
//! \typedef struct sSERIAL_PORT
//! \brief Структура последовательного порта
//! \struct sSERIAL_PORT
//! \brief Структура последовательного порта
//-----------------------------------------------------------------------------
typedef struct sSERIAL_PORT
{
	volatile short	tx_t;					//!< Указатель на голову передатчика
	volatile short	tx_b;					//!< Указатель на хвост передатчика
	volatile short	rx_t;					//!< Указатель на голову приемника
	volatile short	rx_b;					//!< Указатель на хвост приемника
	volatile short	tx_size;			//!< Размер буфера передатчика
	volatile short	rx_size;			//!< Размер буфера приеника
	tTIMER					rx_tm;				//!< Таймер приемника
	BYTE						*tx_buf;			//!< Указатель на буфер передатчика
	BYTE						*rx_buf;			//!< Указатель на буфер приемника
	usart_cr1_type	*usart_cr1;		//!< Указатель на структуру USART->CR1
	DWORD						pin;					//!< резерв
} sSERIAL_PORT;

#define sp_byte(port, x)	sp_hex((port), (x), 2)	//!< Напечатать байт
#define sp_word(port, x)	sp_hex((port), (x), 4)	//!< Напечатать слово
#define sp_dword(port, x)	sp_hex((port), (x), 8)	//!< Напечатать двойное слово

/******************************************************************************
 *	FUNCTION
 *****************************************************************************/
//-----------------------------------------------------------------------------
//! \fn extern void sp_init(sSERIAL_PORT *port,
//! BYTE *tx_buf, int tx_size,
//! BYTE *rx_buf, int rx_size,
//! usart_cr1_type *usart_cr1)
//! \brief Инициализирует последовательный порт
//! \param *port Указатель на структуру порта
//! \param *tx_buf Указатель на буфер передатчика
//! \param *tx_size Размер буфера передатчика
//! \param *rx_buf Указатель на буфер приемника
//! \param *rx_size Размер буфера приемника
//! \param *usart_cr1 Указатель на структуру USART->CR1
//-----------------------------------------------------------------------------
extern void sp_init(sSERIAL_PORT *port,
	BYTE *tx_buf, int tx_size,
	BYTE *rx_buf, int rx_size,
	usart_cr1_type *usart_cr1);

//-----------------------------------------------------------------------------
//! \fn extern void sp_tx_push(sSERIAL_PORT *port, BYTE x)
//! \brief Помещает символ в буфер передатчика
//! \param *port Указатель на структуру порта
//! \param x Помещаемый символ
//-----------------------------------------------------------------------------
extern void sp_tx_push(sSERIAL_PORT *port, BYTE x);

//-----------------------------------------------------------------------------
//! \fn extern BYTE sp_tx_pop(sSERIAL_PORT *port)
//! \brief Извлекает символ из буфера передатчика
//! \param *port Указатель на структуру порта
//! \return Извлеченный символ
//-----------------------------------------------------------------------------
extern BYTE sp_tx_pop(sSERIAL_PORT *port);

//-----------------------------------------------------------------------------
//! \fn extern void	sp_str(sSERIAL_PORT *port, BYTE *str)
//! \brief Помещает строку в буфер передатчика
//! \param *port Указатель на структуру порта
//! \param *str Указатель на строку
//-----------------------------------------------------------------------------
extern void	sp_str(sSERIAL_PORT *port, BYTE *str);

//-----------------------------------------------------------------------------
//! \fn extern void __inline sp_start(sSERIAL_PORT *port)
//! \brief Начинает передачу
//! \param *port Указатель на структуру порта
//-----------------------------------------------------------------------------
extern void sp_start(sSERIAL_PORT *port);

//-----------------------------------------------------------------------------
//! \fn extern void sp_rx_push(sSERIAL_PORT *port, BYTE x)
//! \brief Помещает символ в буфер приемника
//! \param *port Указатель на структуру порта
//! \param x Помещаемый символ
//-----------------------------------------------------------------------------
extern void sp_rx_push(sSERIAL_PORT *port, BYTE x);

//-----------------------------------------------------------------------------
//! \fn extern BYTE sp_rx_pop(sSERIAL_PORT *port)
//! \brief Извлекает символ из буфера приемника
//! \param *port Указатель на структуру порта
//! \return Извлеченный символ
//-----------------------------------------------------------------------------
extern BYTE sp_rx_pop(sSERIAL_PORT *port);

//-----------------------------------------------------------------------------
//! \fn extern void sp_hex(sSERIAL_PORT *port, const DWORD x, const int n)
//! \brief Помещает hex-число в буфер передатчика
//! \param *port Указатель на структуру порта
//! \param x Данные
//! \param n Число hex-цифр
//-----------------------------------------------------------------------------
extern void sp_hex(sSERIAL_PORT *port, const DWORD x, const int n);

//-----------------------------------------------------------------------------
//! \fn extern void sp_dec(sSERIAL_PORT *port, long x)
//! \brief Помещает десятичное число со знаком в буфер передатчика
//! \param *port Указатель на структуру порта
//! \param x Данные
//-----------------------------------------------------------------------------
extern void sp_dec(sSERIAL_PORT *port, long x);

//-----------------------------------------------------------------------------
//! \fn extern void sp_udec(sSERIAL_PORT *port, DWORD x)
//! \brief Помещает десятичное число без знака в буфер передатчика
//! \param *port Указатель на структуру порта
//! \param x Данные
//-----------------------------------------------------------------------------
extern void sp_udec(sSERIAL_PORT *port, DWORD x);

//-----------------------------------------------------------------------------
//! \fn extern void sp_float(sSERIAL_PORT *port, const float f)
//! \brief Помещает вещественное число в буфер передатчика
//! \param *port Указатель на структуру порта
//! \param f Данные
//-----------------------------------------------------------------------------
extern void sp_float(sSERIAL_PORT *port, const float f);

/******************************************************************************
 *	VARIABLE
 *****************************************************************************/
extern const 	BYTE	Hex[];	//!< Шестнадцатеричная строка.

#endif // __SERIAL_PORT_H__
/******************************************************************************
 * КОНЕЦ ФАЙЛА
 *****************************************************************************/
